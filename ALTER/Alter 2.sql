/***********************************************************************

            SENTENCIA     ALTER TABLE
                                      EN ESTE EJERCICIO 
                                      TODAS LAS OPERACIONES DE REDEFINICIÓN DE UNA TABLA 
                                      LAS ESTAMOS HACIENDO  CON TABLAS
                                      NO VACÍAS
                                      CON TUPLAS ALMACENADAS EN LAS TABLAS
                                      **************************************************************************/
                                      
 DROP DATABASE IF EXISTS   PRUEBA2_ALTER;                                   
 CREATE DATABASE IF NOT EXISTS PRUEBA2_ALTER;
  USE PRUEBA2_ALTER;
  
  
  /*** DEFINICIÓN DE TABLA ALUMNOS**/
  DROP TABLE IF EXISTS ALUMNOS;
 CREATE TABLE IF NOT EXISTS ALUMNOS
(
  DNI CHAR(9) NOT NULL,
  NOMBRE VARCHAR(40) NOT NULL,
  PRIMARY KEY(DNI)

) ENGINE INNODB;


                                      
INSERT INTO `prueba2_alter`.`ALUMNOS`
 (`DNI`, `NOMBRE`) 
 VALUES ('36010121A', 'MARÍA FERNÁNDEZ LÓPEZ');
INSERT INTO `prueba2_alter`.`ALUMNOS` 
(`DNI`, `NOMBRE`) 
VALUES ('36111222B', 'JUAN LÓPEZ FERNÁNDEZ');
INSERT INTO `prueba2_alter`.`ALUMNOS`
 (`DNI`, `NOMBRE`) 
 VALUES ('36777888J', 'ISABEL GÓMEZ DAVILA');
 /***    EJERCICIO 1: INTRODUCE DOS TUPLAS MÁS EN LA TABLA ALUMNOS**/
 
 
 
INSERT INTO `prueba2_alter`.`ALUMNOS` (`DNI`, `NOMBRE`) VALUES ('36010122K', 'GONZALO FERNANDEZ LÓPEZ');
INSERT INTO `prueba2_alter`.`ALUMNOS` (`DNI`, `NOMBRE`) VALUES ('33890765P', 'INES TUDELA GÓMEZ');

/*LAS VEMOS*/
SELECT * FROM ALUMNOS;



/***       EJERCICIO 2:   INCORPORAMOS LA  COLUMNA FECHA DE NACIMIENTO   OBLIGATORIA**/
/*** AHORA LA TABLA TIENE ALMACENADA 5 TUPLAS... DE MODO QUE,  ESTA OPERACIÓN CONSISTE EN:
            A) CAMBIAR LA DEFINICIÓN DE LA TABLA CON UNA COLUMNA MÁS  y por tanto
            B)   se AÑADIRÁN 5 FECHAS DE NACIMIENTO------> OBSERVA COMPORTAMIENTO DEL GESTOR
                     COMO LA COLUMNA ESTÁ DEFINIDA COMO OBLIGATORIA ALMACENA VALOR '0000-00-00'
      *******************/                             

ALTER TABLE ALUMNOS
        ADD COLUMN FECHA_NAC DATE NOT NULL;
 /**OBSERVA QUE HA SUCEDIDO, NUEVA COLUMNA Y DATOS PARA LAS TUPLAS EXISTENTES*/       
        
SELECT * FROM ALUMNOS;        

/*******     ANOTA: 
             SI LA  NUEVA COLUMNA  OBLIGATORIA ES NUMÉRICA,  EL GESTOR ALMACENA PARA CADA TUPLA EXISTENTE: VALOR CERO ,
             ES DECIR  0 ( EN BINARIO SI ENTERO), 0.0 ( EN COMA  FLOTANTE SI  REAL )
             SI LA  NUEVA COLUMNA OBLIGATORIA ES DE TIPO CADENA, EL GESTOR ALMACENA PARA CADA TUPLA EXISTENTE :
             VALOR CERO: VALOR CADENA NULA'\0', CADENA DE LONGITUD CERO QUE  OCUPA UN BYTE
            SI LA COLUMNA OBLIGATORIA ES DE TIPO FECHA, EL GESTOR ALMACENA  '0000-00-00'
            Y  SI ES DE TIPO TIME , EL VALOR SERÁ '00:00:00'
            *********************************************************************/
  /***     ES DECIR LE ASIGNA PARA LA NUEVA COLUMNA A CADA TUPLA UN VALOR PORQUE HEMOS DEFINIDO LA COLUMNA COMO OBLIGATORIA
  ____> SIGNIFICA TIENE QUE TENER VALOR EN TODO MOMENTO, PERO ASIGNA O INICIALIZA CON VALOR FALSO 
              PARA EL CONTENIDO DE LA NUEVA COLUMNA***/     
              
 /****    CONTESTA : ¿CÓMO SERÍA EL COMPORTAMIENTO DEL GESTOR
         AL AÑADIR UNA NUEVA COLUMNA A LA TABLA DE TIPO OPTATIVO?
	
         
/**          EJERCICIO 3: INCORPORAMOS EL DATO PESO DE ALUMNO , ES UN REAL EN SIPLE PRECISIÓN 
    ES OPTATIVO**/


ALTER TABLE ALUMNOS
          ADD COLUMN PESO FLOAT  NULL AFTER NOMBRE; 
  /*** VERIFICA EL COMPORTAMIENTO...*/        
  SELECT * FROM ALUMNOS;        
   
/**** EJERCICIO 4: REDEFINIMOS LA COLUMNA NOMBRE DE ALUMNO, PASA A LLAMARSE NOMBRE_APE Y ES VARCHAR(50)*******/
/*** FÍJATE AHORA, LA COLUMNA ESTABA DEFINIDA VARCHAR(40), POR TANTO LA ESTAMOS AMPLIANDO
               ---> LOS DATOSCONTENIDOS NO SUFRIRAN CAMBIO
               SÓLO CAMBIAMOS EL VALOR DEL TAMAÑO MÁXIMO.*/
ALTER TABLE ALUMNOS
     CHANGE COLUMN NOMBRE   NOMBRE_APE VARCHAR(50) NOT NULL;
     
     SELECT * FROM ALUMNOS;
     
     /**** ¿PODEMOS CAMBIAR EL TIPO  DE DATO DE CUALQUIER COLUMNA?
     
       RAZONA  DETALLADAMENTE......
       
       ************************************************************************************/
     
/**** EJERCICIO 4B:  REDEFINIMOS LA COLUMNA NOMBRE_APE DE ALUMNO, PASA A SER  VARCHAR(12)*******/    
/*** FÍJATE AHORA: LA COLUMNA PASA A SER DE UN TAMAÑO MÁXIMO MENOR, LOS DATOS QUE CONTIENE EN ESTE
     MOMENTO PARA DISTINTAS TUPLAS SON CADENAS QUE TIENEN MAYOR LONGITUD***/
     
     ALTER TABLE  ALUMNOS
     MODIFY COLUMN NOMBRE_APE  VARCHAR(12) NOT NULL;
     
/** EL GESTOR EN ESTA OPERACIÓN (ALTER)  PROTEGE LOS DATOS YA ALMACENADOS, CLARO ES LO IMPORTANTE, POR TANTO 
NO EJECUTA LA ORDEN**/      
 /***	Error Code: 1265. Data truncated for column 'NOMBRE_APE' at row 1	0.532 sec**/
 /**** SI LA TABLA ESTUVIERA VACÍA ESTA ORDEN  SI SE EJECUTA**/   
 
 

/**   EJERCICIO 5:  GARANTIZAR LA UNICIDAD DE EL DATO NOMBRE APELLIDOS DE  ALUMNO**/

/*** OPERACIÓN EN LA QUE TE TIENES QUE FIJAR:!!!!
         ESTA VEZ 
         NO SÓLO HAY QUE SABER QUE OPERACIÓN HAY QUE HACER, COMO EN LA ACTIVIDAD 1, CON UNA TABLA VACÍA, SINO QUE, 
         LOS DATOS TIENEN QUE PERMITIRLO---------------> ES DECIR, DATOS EXISTENTES EN LA COLUMNA
         TIENEN QUE SER ÚNICOS PARA PODER EJECUTAR LA ORDEN*****************/
         
 SELECT * FROM ALUMNOS;        

ALTER TABLE   ALUMNOS
   ADD UNIQUE INDEX AK_NOMBRE_APE (NOMBRE_APE);
 
 
 
 SHOW INDEX IN ALUMNOS;  
/* la cardinalidad de una tabla es el numero de tuplas que tiene una tabla
   
   /***  EJERCICIO 5B: 
   *****  FÍJATE EN ESTE EJERCICIO, 
           AÑADIR LA COLUMNA TELEFONO DE ALUMNO  OBLIGATORIA Y GARANTIZAR SU UNICIDAD
           PORQUE QUEREMOS USAR TELEFONO COMO CLAVE ALTERNATIVA **/
           
   
   
        
     /** SI LA TABLA ESTUVIESE VACÍA, SÍ PODRÍAMOS EJECUTAR ESTO LA OPERACIÓN EN UNA SOLA ORDEN**/   
        ALTER TABLE ALUMNOS
             ADD  COLUMN TELEFONO CHAR(9) NOT NULL,
             ADD UNIQUE INDEX AK_TELF_ALUMNO (TELEFONO);
             
  /*** QUÉ PASARÁ,  SI ACABO DE AÑADIR ESA COLUMNA Y TIENE PARA TODAS LAS TUPLAS EL MISMO
        VALOR..........**/           
   /** ESTA OPERACIÓN ASÍ NO PODEMOS REALIZARLA.... LOS DATOS EN LA NUEVA COLUMNA
       NO ME LO PERMITEN   
      	Error Code: 1062. Duplicate entry '' for key 'alumnos.AK_TELF_ALUMNO'	0.219 sec
       ****/
       /**** CON DATOS ALMACENADOS EN LA TABLA TENGO QUE SEPARAR LAS DOS NUEVAS DEFINICIONES
               PARA PERMITIR PODER, ENTRE AMBAS ÓRDENES,  INTRODUCIR  NUEVOS DATOS ÚNICOS EN LA COLUMNA TELEFONO*****/
               
       /* 1º  PASO: AÑADIMOS LA DEFINICIÓN DE LA NUEVA COLUMNA**/
       ALTER TABLE ALUMNOS 
              ADD COLUMN TELEFONO CHAR(9) NOT NULL;   
              
        SELECT * FROM ALUMNOS;
        /* CONTESTA: ¿QUÉ ESTÁ ALMACENADO EN LA COLUMNA TELEFONO DE CADA TUPLA?***/
        
        /** 2º  PASO:  INTRODUCIMOS DATOS  SIN REPETICIONES, CLARO**/
        UPDATE `prueba2_alter`.`ALUMNOS`
           SET `TELEFONO` = '687123456' WHERE (`DNI` = '36010121A');
        UPDATE `prueba2_alter`.`ALUMNOS` 
           SET `TELEFONO` = '986345678' WHERE (`DNI` = '36111222B');
        UPDATE `prueba2_alter`.`ALUMNOS` 
           SET `TELEFONO` = '544897023'
             WHERE (`DNI` = '36777888J');
	    UPDATE `prueba2_alter`.`ALUMNOS` 
           SET `TELEFONO` = '981445678' WHERE (`DNI` = '33890765P');  
        UPDATE `prueba2_alter`.`ALUMNOS` 
           SET `TELEFONO` = '666456781' WHERE (`DNI` = '36010122K'); 
        /**3º DEFINIMOS EL ÍNDICE****/
        ALTER TABLE ALUMNOS
             ADD UNIQUE INDEX AK_TELF_ALUMNO(TELEFONO);
             
        
        /**AHORA SÍ**/
        
        SHOW INDEX IN ALUMNOS;

     /****** SI LA COLUMNA QUE INCORPORO A LA TABLA ES OPTATIVA,
            Y QUIERO QUE TAMBIÉN SEA ÚNICA SI PODRÉ HACERLO
             EN UNA SOLA OPERACION**/
             
             
             ALTER TABLE ALUMNOS
                 ADD COLUMN DIRECCION VARCHAR(45) NULL,
                 ADD UNIQUE INDEX DIRECCION_U (DIRECCION);
   /*** CREO UN NUEVO ESPACIO PARA UN DATO OPTATIVO, NO SE INICIALIZA CON NINGÚN VALOR LA COLUMNA EN LAS TUPLAS QUE YA EXISTEN,
         EL ÍNDICE CUANDO TENGA DATOS REGISTRADOS IMPONDRÁ A LOS MISMOS LA RESTRICCIÓN DE UNICIDAD*/
        
        
      SELECT * FROM ALUMNOS;
      SHOW INDEX IN ALUMNOS;
      /***** FÍJATE EN LA CARDINALIDAD DEL ÍNDICE**/
      
   
/*** EJERCICIO 6: ELIMINAMOS LA COLUMNA PESO**/

ALTER TABLE   ALUMNOS
     DROP COLUMN PESO;
alter table alumnos
      drop direccion;     
     /*** EJERCICIO 7: MODIFICAMOS CLAVE PRIMARIA DE LA TABLA, PASA A SER UN ID_ALUMNO AUTO INCREMENTABLE**/

ALTER TABLE ALUMNOS
  DROP PRIMARY KEY,
  ADD COLUMN ID_ALUMNO INT UNSIGNED NOT NULL AUTO_INCREMENT FIRST ,
  ADD PRIMARY KEY (ID_ALUMNO);
  
  
  /*** ATENCIÓN !!  FIJARSE EN EL COMPORTAMIENTO DE AUTO_INCREMENT CUANDO YA HAY TUPLAS ALMACENADAS**/
  
  SELECT * FROM ALUMNOS;
            /* QUE VALOR TENDRÁ AHORA ID_ALUMNO PARA EL NUEVO ALUMNO?   */
  INSERT INTO ALUMNOS
  (ID_ALUMNO, DNI, NOMBRE_APE,FECHA_NAC, TELEFONO)
  VALUES
  (NULL,'33456909D','PEDRO HERRERO GARCÍA', '2000-01-14','567002345');
  /*** NO TE DOY VALOR PARA ID-ALUMNO,, NULL)**/
  SELECT * FROM ALUMNOS;
  
/***    EJERCICIO 8:   ALMACENAR  LA ENTIDAD CURSO*******/

CREATE TABLE IF NOT EXISTS CURSOS
(
  ID_CURSO INT UNSIGNED   NOT NULL AUTO_INCREMENT,
  NOMBRE   VARCHAR(30) NULL,
  primary key (ID_CURSO),
  UNIQUE INDEX  NOMBRE_CURSO_UNICO (NOMBRE)
) engine innodb;



INSERT  INTO CURSOS
(NOMBRE)
VALUES
('BASES DE DATOS'),
('REDES DE AREA LOCAL'),
('PROGRAMACIÓN DE SERVICIOS'),
('PROGRAMACIÓN JAVA NIVEL I');

SELECT  * FROM CURSOS;
SHOW INDEX IN CURSOS;

/** EJERCICIO 8B: AÑADE DESDE AQUÍ DOS CURSOS MÁS
        INTENTA QUE UN NUEVO CURSO SE LLAME BASES DE DATOS, PODRÁS? **/ 
        
  INSERT  INTO CURSOS
(NOMBRE)
VALUES
('Rede locales nivel 2'),
('Fundamentos de hardware');      

INSERT  INTO CURSOS
(id_curso,NOMBRE)
VALUES
('BASES DE DATOS');/*va a dar error


/***     EJERCICIO  9 :  INCORPORAR LA RELACIÓN   
                                          CADA CURSO TIENE QUE TENER ASIGNADO UN DELEGADO DE CURSO,
                                          QUE ES UN ALUMNO, A UN ALUMNO NO SE LE NOMBRE NUNCA DELEGADO
                                          DE MÁS DE UN CURSO AL MISMO  TIEMPO.
                                          NO PERMITIREMOS ELIMINAR A UN ALUMNO DE LA BASE DE DATOS MIENTRAS 
                                          CONSTE COMO DELEGADO DE UN CURSO
                                          **************************************************************/
 
/*** SI LA TABLA ESTUVIESE VACÍA PODRÍAMOS EJECUTAR ESTA ORDEN.......
      PERO CON TUPLAS ALMACENADAS ESTO DARÁ ERROR  ************/ 
    
ALTER TABLE CURSOS
    ADD COLUMN DELEGADO  INTEGER UNSIGNED  NOT NULL,
    ADD FOREIGN KEY (DELEGADO) REFERENCES  ALUMNOS(ID_ALUMNO)
                                ON DELETE  RESTRICT
                                ON UPDATE CASCADE,
    ADD UNIQUE INDEX FK_DELEGADO (DELEGADO) ;
    
    /**** EXPLICA  CLARAMENTE ¿POR QUÉ NO SE PUEDE EJECUTAR EN UNA ÚNICA ORDEN ?
         	Error Code: 1452. Cannot add or update a child row: a foreign key constraint fails
            (`prueba2_alter`.`#sql-1020_11`, CONSTRAINT `cursos_ibfk_1` FOREIGN KEY (`DELEGADO`) 
            REFERENCES `alumnos` (`ID_ALUMNO`) ON DELETE RESTRICT ON UPDATE CASCADE)	0.422 sec
            
   ******/         
/** LA SOLUCIÓN**/
    /*** PRIMERO: CREAMOS LA COLUMNA**/
    ALTER TABLE CURSOS
    ADD COLUMN DELEGADO  INTEGER UNSIGNED  NOT NULL;
    
    /*** SEGUNDO: LE DAMOS VALORES INTEGROS A LA COLUMNA DELEGADO 
                                     LOS NUEVOS  VALORES TIENEN QUE SER ÍNTEGROS Y !!!ÚNICOS !!! *****************/
      
      SELECT * FROM CURSOS;
      SELECT * FROM ALUMNOS;
     /*** AÑADIMOS LOS DATOS QUE HACEN FALTA**/ 
 UPDATE `prueba2_alter`.`CURSOS` SET `DELEGADO` = '1' WHERE (`ID_CURSO` = '1');
UPDATE `prueba2_alter`.`CURSOS` SET `DELEGADO` = '2' WHERE (`ID_CURSO` = '2');
UPDATE `prueba2_alter`.`CURSOS` SET `DELEGADO` = '3' WHERE (`ID_CURSO` = '3');
UPDATE `prueba2_alter`.`CURSOS` SET `DELEGADO` = '4' WHERE (`ID_CURSO` = '4');

/*** TERCERO: AHORA YA PODEMOS  DEFINIR LA RESTRICCIÓN DE INTEGRIDAD REFERENCIAL Y RESTRICCIÓN DE UNICIDAD
                         PARA LA COLUMNA DELEGADO, PORQUE LOS DATOS QUE CONTIENE LA COLUMNA NOS LO PERMITE**/
                         
 ALTER TABLE CURSOS
         ADD FOREIGN KEY (DELEGADO) REFERENCES  ALUMNOS(ID_ALUMNO)
                                ON DELETE  RESTRICT
                                ON UPDATE CASCADE,
          ADD UNIQUE INDEX FK_DELEGADO (DELEGADO) ;


      
    
   /*** EJERCICIO 10:  
         QUEREMOS AÑADIR EN LA BASE DE DATOS EL DATO FECHA DESDE QUE UN ALUMNO ES NOMBRADO DELEGADO DE CURSO
         Y EL LIBRO DE CONSULTA QUE TIENEN LOS CURSOS, NO TODOS LOS CURSOS TIENEN LIBRO
         DE CONSULTA***/
         
         ALTER TABLE CURSOS
               ADD COLUMN FECHA_DELEGADO DATE NOT NULL AFTER DELEGADO,
               ADD COLUMN LIBRO VARCHAR(60) NULL   AFTER NOMBRE ;
         SELECT * FROM CURSOS;       
       /*** EJERCICIO 11: 
       ¿PODRÍAMOS AHORA (EN ESTE INSTANTE )IMPONER LA RESTIRCCIÓN DE UNICIDAD AL DATO LIBRO DE CURSO?   
       ¿ Y PARA LA COLUMNA FECHA_DELEGADO?
            **/
        /*** PARA COLUMNA LIBRO, SÍ, PORQUE ES OPTATIVA Y EL GESTOR
             NO HA INICIALIZADO LA COLUMNA .
             PARA COLUMNA FECHA_DELEGADO, NO PUEDO, PORQUE TODAS LAS TUPLAS TIENEN
             EL MISMO VALOR '0000-00-00'
             ***/
            
            ALTER TABLE CURSOS
                ADD UNIQUE INDEX  LIBRO_CONSULTA_UNICO (LIBRO);
                
                /*ES OK*/
                
             ALTER TABLE CURSOS
                ADD UNIQUE INDEX   UNICO_FECHA_DELEGADO(FECHA_DELEGADO);
                
      /*     Error Code: 1062. Duplicate entry '0000-00-00' for key 'cursos.UNICO_FECHA_DELEGADO'  **/
        
                
       /*** EJERCICIO 12:  
                COMO ACCEDEREMOS MUCHAS VECES AL DATO LIBRO  DE CONSULTA DE LOS CURSOS, 
                PARA AGILIZAR LAS CONSULTAS Y ACCESOS  A ESE DATO, 
                CREAR UN ÍNDICE,  PARA HACERLO MÁS LIGERO REALIZAR EL ÍNDICE CON LOS 15 PRIMEROS CARACTERES DEL DATO
                LIBRO    ***/ 
                
         ALTER TABLE CURSOS
           ADD INDEX BUSCA_LIBRO (LIBRO (15));
         
    
  /***   EJERCICIO 13:  MUESTRA LOS ÍNDICES CREADOS PARA LA TABLA CURSOS***/
  
  SHOW INDEX IN CURSOS;
    
    
/***    EJERCICIO 14:  ALMACENAR ENTIDAD PROFESOR***/

DROP TABLE IF EXISTS PROFESORES;
CREATE TABLE IF NOT EXISTS PROFESORES
(
       DNI CHAR(9) NOT NULL PRIMARY KEY,
       NOMBRE VARCHAR(40) NOT NULL,
       FECHA_ALTA DATE NOT NULL

)ENGINE INNODB;
/** INTRODUCE TRES TUPLAS **************/
SELECT *FROM PROFESORES;
INSERT INTO `prueba2_alter`.`PROFESORES` (`DNI`, `NOMBRE`, `FECHA_ALTA`) VALUES ('34000123A', 'JORGE CABADA FERRÍN', '2020-10-01');
INSERT INTO `prueba2_alter`.`PROFESORES` (`DNI`, `NOMBRE`, `FECHA_ALTA`) VALUES ('36890225B', 'TERESA FREIRE CHAPELA', '2019-10-01');
INSERT INTO `prueba2_alter`.`PROFESORES` (`DNI`, `NOMBRE`, `FECHA_ALTA`) VALUES ('33890111G', 'KIKO PÉREZ PÉREZ', '2010-10-09');

  
/***    EJERCICIO 15:    ALMACENAR PARA LOS PROFESORES,
                                       NSS COLUMNA OBLIGATORIA  Y ÚNICA (AK) CADENA DE 12 CARACTERES DELANTE DE FECHA_ALTA,
                                       FECHA DE NACIMIENTO DESPUES DE COLUMNA NOMBRE  OBLIGATORIA,
                                       CAMBIAR LA FECHA DE ALTA POR AÑO DE ALTA,
                                       AÑADIR ESTADOCIVIL DESPUES DE NSS VALOR ENUMERADO OPTATIVO
                  ******/                     
                                       
    /** ESTA ORDEN CON TABLA SIN TUPLAS, SÍ SE EJECUTA,
         CON TUPLAS ALMACENADAS EN  LA TABLA  ¿SE PODRÁ EJECUTAR?
            POR QUÉ?
            ***/
            
ALTER TABLE PROFESORES
     ADD COLUMN NSS CHAR(12)  NOT  NULL   AFTER NOMBRE,  
     ADD UNIQUE INDEX AK_NSS (NSS),
     ADD FECHA_NAC DATE NOT NULL AFTER NOMBRE,
     ADD  COLUMN ANHO_ALTA YEAR NOT NULL AFTER FECHA_NAC,
      DROP COLUMN FECHA_ALTA,
     ADD COLUMN ESTADO_CIVIL ENUM ('SOLTERO/A', 'CASADO/A', 'VIUDO/A')  NULL AFTER NSS;
     
    
     
     /*SOLUCIÓN EJERCICIO 15***/
     /*** PRIMERO:   **/
     
     ALTER TABLE PROFESORES
     ADD COLUMN NSS CHAR(12)   NULL  /*UNIQUE*/  AFTER NOMBRE,  
     /**********************************/
     ADD FECHA_NAC DATE NOT NULL AFTER NOMBRE,
     ADD  COLUMN ANHO_ALTA YEAR NOT NULL AFTER FECHA_NAC,
      DROP COLUMN FECHA_ALTA,
     ADD COLUMN ESTADO_CIVIL ENUM ('SOLTERO/A', 'CASADO/A', 'VIUDO/A')  NULL AFTER NSS;
     
     /** SEGUNDO INTRODUCIMOS DATOS ÚNICOS EN NSS**/
     SELECT * FROM PROFESORES;     
UPDATE `prueba2_alter`.`PROFESORES` SET `NSS` = '111111111111', `ESTADO_CIVIL` = 'SOLTERO/A' WHERE (`DNI` = '33890111G');
UPDATE `prueba2_alter`.`PROFESORES` SET `NSS` = '222222222222', `ESTADO_CIVIL` = 'CASADO/A' WHERE (`DNI` = '34000123A');
UPDATE `prueba2_alter`.`PROFESORES` SET `NSS` = '333333333333', `ESTADO_CIVIL` = 'VIUDO/A' WHERE (`DNI` = '36890225B');

/** TERCERO: AHORA, LOS DATOS EN LA COLUMNA NSS, YA PERMITEN DEJAR DEFINIDA LA RESTRICCIÓN DE UNICIDAD
    PARA LA COLUMNA NSS**/
    ALTER TABLE PROFESORES
         ADD UNIQUE INDEX AK_NSS (NSS);
         
         
/***    EJERCICIO 16: 
             REGISTRAR LA RELACIÓN SER PROFESOR TUTOR DE CURSO:
             ALGUNOS CURSOS TIENEN NOMBRADO UN TUTOR,
             SE REGISTRA EL DÍA DE SEMANA DE LA TUTORÍA Y LA HORA
             UN PROFESOR  PUEDE SER TUTOR DE MÁS DE UN CURSO ***/
             
/*** CON LA TABLA VACÍA PODRÍAMOS HACER TODAS ESTAS DEFINICIONES   JUNTAS **/
/*** CON LA TABLA CON TUPLAS  ALMACENADAS 
!!!!!!!!!!!!!!!!!!!!!!!! TAMBIÉN!!!!!    POR QUÉ   ?  *****/
/***  PORQUE LA RELACIÓN ES OPTATIVA !!!!!!
     ENTONCES LA DEFINICIÓN DE FK NO DA ERROR**/
     
/*** ¿SÍ FUESE UNA RELACIÓN OBLIGATORIA ?**/     
     
ALTER TABLE CURSOS
     ADD COLUMN ( TUTOR CHAR(9) NULL,
                                  DIA_TUTORIA SET ('LUNES','MARTES','MIERCOLES','JUEVES','VIERNES') NULL,
                                 HORA_TUTORIA TIME NULL
                                 ),
     ADD FOREIGN KEY (TUTOR) REFERENCES PROFESORES(DNI)
                               ON DELETE SET NULL
                               ON UPDATE CASCADE,
     ADD INDEX FK_TUTOR_CURSO (TUTOR);
/*** ES MUY FÁCIL ENTENDERLO, NULL SIGNIFICA NO TIENE VALOR---> NO OCUPA ESPACIO
      SUCEDE IGUAL QUE CUANDO ESTAMOS DEFINIENDO POR PRIMERA VEZ, CREANDO,  TODAS LAS RESTRICCIONES EN UNA TABLA,
      CUANDO LA COLUMNA TOME VALOR DEBERÁ CUMPLIR LAS RESTRICCIONES IMPUESTAS, RESTRICCIÓN DE INTEGRIDAD REFERENCIAL-->
      EL VALOR CUANDO LO TENGA TIENE QUER EL DE LA CLAVE PRIMARIA DE UN PROFESOR, UN DNI**/
      

SELECT * FROM CURSOS;
/*** EJERCICIO 17:
          CREA UN ÍNDICE PARA AGILIZAR LAS OPERACIONES CON EL DATO NOMBRE PROFESOR**/
   ALTER TABLE PROFESORES
          ADD  UNIQUE INDEX  BUSCA_PROFESOR_NOMBRE (NOMBRE(20));
  /** O BIEN**/        

CREATE   UNIQUE INDEX BUSCA_PROFESOR_NOMBRE ON PROFESORES (NOMBRE (20));

/***   EJERCICIO 18:  ELIMINA ELÍNDICE ANTERIOR**/
  ALTER TABLE PROFESORES
         DROP INDEX BUSCA_PROFESOR_NOMBRE;
        /* O BIEN*/
        
   DROP INDEX BUSCA_PROFESOR_NOMBRE ON PROFESORES;     
         




/**** EJERCICIO 19:         CAMBIA LA RELACIÓN TUTOR DE CURSO
                                           A PARTIR DE AHORA UN PROFESOR SÓLO PODRÁ SER TUTOR DE UN CURSO
                                          !!!!! ATENCIÓN                                **/

/** EL ÍNDICE FK_TUTOR_CURSO NO LO PUEDO BORRAR
     XQ ESTÁ ASOCIADO A LA RESTRICCIÓN DE FOREIGN KEY 
          ESTA ORDEN DA ERROR:
          
          DROP INDEX FK_TUTOR_CURSO ON CURSOS;
          
          Error Code: 1553. Cannot drop index 'FK_TUTOR_CURSO': needed in a foreign key constraint	0.000 sec

          ***/
 ALTER TABLE CURSOS
     DROP INDEX FK_TUTOR_CURSO,
     ADD  UNIQUE INDEX FK_TUTOR_CURSO (TUTOR);
                              /*** ATENCIÓN, EN EL MOMENTO EN QUE SE EJECUTA ESTA ORDEN CON DATOS EN LA TABLA CURSOS,
                                    LA INFORMACIÓN ALMACENADA EN LA COLUMNA TUTOR TIENE QUE SER SIN REPETICIONES,
                                    SINO LOS DATOS NO PERMITIRÁN LA CREACIÓN DEL ÍNDICE ÚNICO Y LA ORDEN DARÁ ERROR***/
 
 /************************ OBSERVA ESTE CÓDIGO...
                                  **/
 
 START TRANSACTION;

ALTER TABLE CURSOS
   DROP FOREIGN KEY CURSOS_IBFK_2;


DROP INDEX FK_TUTOR_CURSO ON CURSOS;

ALTER TABLE CURSOS
    ADD FOREIGN KEY (TUTOR) REFERENCES PROFESORES(DNI)
                            ON DELETE SET NULL
                            ON UPDATE CASCADE,
    ADD UNIQUE INDEX FK_TUTOR_CURSO (TUTOR);


COMMIT;



/*** todas estas operaciones 
en una transacción****/
 






